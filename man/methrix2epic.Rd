% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methrix2epic.R
\name{methrix2epic}
\alias{methrix2epic}
\title{Subset methrix object to Illumina array probes}
\usage{
methrix2epic(
  m,
  array_type = c("450K", "EPIC", "both"),
  genome = NULL,
  match_tolerance = 0,
  keep_metadata = TRUE,
  return_eset = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{m}{A methrix object}

\item{array_type}{Character vector specifying which array probes to include. 
Options: "450K", "EPIC", or "both". Default: c("450K", "EPIC", "both")}

\item{genome}{Character specifying genome build ("hg19" or "hg38"). 
If NULL (default), auto-detected from methrix metadata}

\item{match_tolerance}{Integer. Tolerance in base pairs for coordinate matching. 
Default: 0 (exact matching)}

\item{keep_metadata}{Logical. Whether to add array probe metadata to output rowData. 
Default: TRUE}

\item{return_eset}{Logical. Whether to return an ExpressionSet object instead of methrix. 
Default: FALSE}

\item{verbose}{Logical. Whether to print progress messages. Default: TRUE}
}
\value{
A subsetted methrix object or ExpressionSet (if return_eset=TRUE) containing 
only array probe sites. If keep_metadata=TRUE, rowData/featureData will include 
probe_id and array_type columns.
}
\description{
Subsets a methrix object to include only CpG sites that 
correspond to Illumina 450K or EPIC array probes, enabling direct comparison 
with array-based methylation data.
}
\details{
This function matches CpG coordinates from a methrix object with 
probe coordinates from Illumina methylation arrays. It supports both 450K 
and EPIC arrays across hg19 and hg38 genome builds. The function can 
auto-detect the genome build from methrix metadata or use a user-specified build.
}
\examples{
\dontrun{
data('methrix_data')

# Subset to EPIC array probes (auto-detect genome)
epic_data <- methrix2epic(methrix_data, array_type = "EPIC")

# Subset to 450K probes with specific genome
k450_data <- methrix2epic(methrix_data, array_type = "450K", genome = "hg19")

# Subset to both arrays with 2bp tolerance
both_data <- methrix2epic(methrix_data, array_type = "both", match_tolerance = 2)

# Return as ExpressionSet instead of methrix
epic_eset <- methrix2epic(methrix_data, array_type = "EPIC", return_eset = TRUE)

# Check what was subsetted
S4Vectors::metadata(epic_data)$array_subset

# Check ExpressionSet results  
summarize_array_subset(epic_eset)
}

}
